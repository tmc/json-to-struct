package main

import (
	"bytes"
	"flag"
	"io/ioutil"
	"os"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
)

// If `-write-golden` is provided when running tests, golden files are written.
var writeGolden = false

func TestMain(m *testing.M) {
	var flagWriteGolden = flag.Bool("write-golden", false, "If true, writes out golden files")
	flag.Parse()
	if *flagWriteGolden {
		writeGolden = true
	}
	os.Exit(m.Run())
}

func TestGenerate(t *testing.T) {
	// t.Parallel()

	tests := []struct {
		name    string
		wantErr bool
	}{
		{name: "empty", wantErr: true},
		{name: "test_simple_json"},
		{name: "test_nested_json"},
		{name: "test_nullable_json"},
		{name: "test_repeated_json"},
		{name: "test_simple_array"},
		{name: "test_invalid_field_chars"},
		{name: "more_complex_example"},
		{name: "test_mixed_nulls"},
	}
	for _, tt := range tests {
		tt := tt // capture range variable
		t.Run(tt.name, func(t *testing.T) {
			//t.Parallel()
			input := openTestData(t, tt.name+".json")

			g := &generator{
				TypeName:    tt.name,
				PackageName: "test_package",
				OmitEmpty:   true,
			}

			var buf bytes.Buffer
			err := g.generate(&buf, bytes.NewReader(input))
			if err != nil {
				if tt.wantErr {
					t.Logf("generator.generate() got expected error = %v", err)
					return
				}
				t.Errorf("generator.generate() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			got := buf.Bytes()
			goldenFile := tt.name + ".go"
			if writeGolden {
				t.Log("writing golden file")
				writeTestData(t, goldenFile, got)
				return
			}
			want := string(openTestData(t, goldenFile))
			gotStr := string(got)
			if diff := cmp.Diff(want, gotStr); diff != "" {
				t.Errorf("generate() mismatch (-want +got):\n%s", diff)
			}
		})
	}
}

func openTestData(t *testing.T, filename string) []byte {
	input, err := ioutil.ReadFile("testdata/" + filename)
	if err != nil {
		t.Error(err)
	}
	return input
}

func writeTestData(t *testing.T, filename string, contents []byte) {
	err := ioutil.WriteFile("testdata/"+filename, contents, 0644)
	if err != nil {
		t.Error(err)
	}
}
func TestTemplates(t *testing.T) {
	// Test external template loading
	templateFile := "testdata/template-header.txt"

	// Create a generator with the template file
	cfg := generator{
		TypeName:    "Person",
		PackageName: "main",
		OmitEmpty:   true,
		Template:    templateFile,
	}
	err := cfg.loadTemplates()
	if err != nil {
		t.Fatalf("loadTemplates() error = %v", err)
	}

	if cfg.fileTemplate == nil {
		t.Fatal("fileTemplate should not be nil after loading external template")
	}
	if cfg.typeTemplate == nil {
		t.Fatal("typeTemplate should not be nil after loading external template")
	}

	// Test that the template produces expected output with header comment
	testJSON := `{"name": "John", "age": 30}`

	var buf bytes.Buffer
	err = cfg.generate(&buf, strings.NewReader(testJSON))
	if err != nil {
		t.Fatalf("generator.generate() error = %v", err)
	}

	got := buf.Bytes()

	gotStr := string(got)

	// Check that the generated code contains the header comment
	if !strings.Contains(gotStr, "// Code generated by json-to-struct; DO NOT EDIT.") {
		t.Errorf("Generated code should contain header comment, got:\n%s", gotStr)
	}

	// Check that it contains the struct comment
	if !strings.Contains(gotStr, "// Person represents the JSON structure") {
		t.Errorf("Generated code should contain struct comment, got:\n%s", gotStr)
	}

	// Test fallback to embedded templates
	cfg2 := generator{
		TypeName:    "Person",
		PackageName: "main",
		OmitEmpty:   true,
	}
	err = cfg2.loadTemplates() // No template file - should use embedded templates
	if err != nil {
		t.Fatalf("loadTemplates() with embedded templates error = %v", err)
	}

	var buf2 bytes.Buffer
	err = cfg2.generate(&buf2, strings.NewReader(testJSON))
	if err != nil {
		t.Fatalf("generator.generate() with embedded templates error = %v", err)
	}

	got2 := buf2.Bytes()

	got2Str := string(got2)

	// Should NOT contain the header comment when using embedded templates
	if strings.Contains(got2Str, "// Code generated by json-to-struct; DO NOT EDIT.") {
		t.Errorf("Embedded templates should not contain header comment, got:\n%s", got2Str)
	}
}
